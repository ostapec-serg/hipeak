import threadingfrom aiogram import Bot, Dispatcher, typesfrom aiogram.utils import markdown as fmt, executorfrom asgiref.sync import async_to_syncfrom hipeak_portal.settings import BOT_TOKEN, BOT_CHAT_IDfrom news_blog.models import Newsfrom telegram_bot.models import TelegramUsersfrom telegram_bot import markups as navimport loggingimport osos.environ.setdefault("DJANGO_SETTINGS_MODULE", "hipeak_portal.settings")os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"logging.basicConfig(level=logging.INFO)bot = Bot(token=BOT_TOKEN)dp = Dispatcher(bot)chat = BOT_CHAT_IDadmin_list = [480099400]user_list = TelegramUsers.objects.all().values_list('user_id', flat=True)# user_list = [480099400]host_url = 'https://hipeak-portal.herokuapp.com'# host_url = 'http://localhost:8000'@dp.message_handler(commands='start')async def start(message: types.Message):    await bot.send_message(message.from_user.id, f"Привіт {message.from_user.username}", reply_markup=nav.mainMenu)@dp.message_handler()async def start(message: types.Message):    user = TelegramUsers.objects.get(user_id=message.from_user.id)    if message.text == 'Головне меню':        if message.from_user.id in user_list:            await bot.send_message(                chat_id=message.chat.id,                text="some text",                reply_markup=nav.mainSubscribeMenu            )        await bot.send_message(chat_id=message.chat.id, text='some text', reply_markup=nav.mainMenu)    if message.text == 'Остання новина':        random_news = News.objects.last()        text = fmt.text(            fmt.text(random_news.name),            fmt.text(random_news.description),            fmt.text('Детальніше на сайті\n',  f"{host_url}{random_news.get_absolute_url()}"),            sep="\n"        )        if (message.from_user.id in user_list and user.is_active):            await bot.send_photo(message.from_user.id, open(random_news.news_img.path, 'rb'))            await bot.send_message(                chat_id=message.from_user.id,                text=text, parse_mode='HTML',                reply_markup=nav.mainSubscribeMenu            )        else:            await bot.send_photo(message.from_user.id, open(random_news.news_img.path, 'rb'))            await bot.send_message(                chat_id=message.from_user.id,                text=text, parse_mode='HTML',                reply_markup=nav.mainMenu            )    if message.text == 'Підписатись':        if message.from_user.id not in user_list:            new_user = TelegramUsers(                user_id=message.from_user.id,                chat_id=message.chat.id,                username=message.from_user.username            )            new_user.save()            await bot.send_message(                chat_id=message.chat.id,                text="Реєстрація успішна!",                reply_markup=nav.mainSubscribeMenu            )        elif message.from_user.id in user_list:            user = TelegramUsers.objects.get(user_id=message.from_user.id)            if user.is_active:                await bot.send_message(                    chat_id=message.chat.id,                    text="Ви вже зареєстровані!",                    reply_markup=nav.mainSubscribeMenu)            else:                user.is_active = False                user.save()                await bot.send_message(                    chat_id=message.chat.id,                    text="Ви зареєстровані!",                    reply_markup=nav.mainSubscribeMenu                )    if message.text == 'Відписатись':        if message.from_user.id in user_list:            user = TelegramUsers.objects.get(user_id=message.from_user.id)            if user.is_active:                user.is_active = False                user.save()                await bot.send_message(                    chat_id=message.chat.id,                    text='Ви відписались!',                    reply_markup=nav.mainMenu                )            await bot.send_message(                    chat_id=message.chat.id,                    text='Ви відписались!',                    reply_markup=nav.mainMenu                )    if message.text == 'Знайти тур':        if message.from_user.id in user_list:            if TelegramUsers.objects.get(user_id=message.from_user.id).is_active:                await bot.send_message(                    chat_id=message.chat.id,                    text="Оберіть що вам підходить",                    reply_markup=nav.mainFilterMenu                )@async_to_syncasync def tour_updates_sending(instance):    text = fmt.text(        fmt.text(instance.name),        fmt.text(instance.start_date, instance.finish_date),        fmt.text(instance.description),        fmt.text('Харчування та проживання', instance.food, instance.residence),        fmt.text('Вартість', instance.price, 'uah'),        fmt.text('Контакти', instance.organisation.phone),        fmt.text('Детальніше на сайті', f"{host_url}{instance.get_absolute_url()}"),        sep="\n")    await bot.send_photo(chat_id=chat, photo=open(instance.img.path, 'rb'))    await bot.send_message(chat_id=chat, text=text, parse_mode='HTML')async def startup(dp):    await bot.send_message(chat_id=admin_list[0], text='Привіт, людина!')# @dp.message_handler(commands='Підписатись')# async def unsubscribe(message: types.Message):#     if message.from_user.id in user_list:#         user = TelegramUsers.objects.get(user_id=message.from_user.id)#         if user.is_active:#             user.is_active = False#             user.save()#             await message.reply('Ви відписались!')#         await message.reply('Ви відписались!!!!')# @dp.message_handler(commands='dun_sub')# async def subscribe(message: types.Message):# @dp.message_handler(commands='unsub')# async def unsubscribe(message: types.Message):#     if message.from_user.id in user_list:#         user = TelegramUsers.objects.get(user_id=message.from_user.id)#         if user.is_active:#             user.is_active = False#             user.save()#             await message.reply('Ви відписались!')#         await message.reply('Ви відписались!!!!')def start_bot():    thread = threading.Thread(        target=executor.start_polling(dp, on_startup=startup)    )    return thread