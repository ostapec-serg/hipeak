import httpimport randomfrom _socket import gethostnamefrom django.contrib.auth import password_validationfrom django.contrib.auth.models import AbstractUserfrom django.core.mail import send_mailfrom django.db import modelsfrom django.urls import reverse_lazyfrom django.utils.translation import gettext_lazy as _class User(AbstractUser):    """    Users within the Django authentication system are represented by this    model.    Username, email and password are required. is_active=False by default.    Other fields are optional.    """    email = models.EmailField(        _("email address"),        blank=True, unique=True,        help_text="Required. 150 characters or fewer",        error_messages={"unique": _("A user with that email already exists.")})    is_active = models.BooleanField(        _("active"),        default=True,        help_text=_(            "Designates whether this user should be treated as active. "            "Unselect this instead of deleting accounts."        ),    )    EMAIL_FIELD = "email"    USERNAME_FIELD = "username"    REQUIRED_FIELDS = [EMAIL_FIELD]    def email_user(self, subject, message, from_email=None, **kwargs):        """Send an email to this user."""        send_mail(subject, message, from_email, [self.email], **kwargs)    def build_message(self, code, request):        url = self._get_email_url(code, request)        subject = "Registration on hipeak.portal"        message = f"Ви отримали цього листа тому, що Вашу почтову одресу " \                  f"вказано для реєстрації на порталі hipeak.portal як {self.username}.\n" \                  f"Якщо це були не Ви, проігноруйте цей лист!\n" \                  f"Для підтвердження реєстрації перейдіть за посиланням\n" \                  f"{url} \n" \                  f"!Посилання дійсне 2 дні!"        if subject and message:            return self.email_user(subject, message)    @staticmethod    def _get_email_url(code, request):        from django.contrib.sites.shortcuts import get_current_site        current_site = get_current_site(request)        name = current_site.domain        domain = current_site.name        url = f"https://{domain}{reverse_lazy('registration_confirm', kwargs={'slug': code})}"        return url