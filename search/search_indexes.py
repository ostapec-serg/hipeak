from haystack import indexesfrom equipment_stores.models import EquipmentStoresfrom news_blog.models import Newsfrom tours.models import Organisations, Toursclass NewsIndex(indexes.SearchIndex, indexes.Indexable):    text = indexes.CharField(document=True, use_template=True)    name = indexes.CharField(model_attr='name')    description = indexes.EdgeNgramField(model_attr='description')    content_auto = indexes.EdgeNgramField(model_attr='name')    def get_model(self):        """        Should return the ``Model`` class (not an instance) that the rest of the        ``SearchIndex`` should use        """        return News    def index_queryset(self, using=None):        """        Get the default QuerySet to index when doing a full update.        Subclasses can override this method to avoid indexing certain objects.        Used when the entire index for model is updated.        """        return self.get_model().objects.filter().all()class EquipmentStoresIndex(indexes.SearchIndex, indexes.Indexable):    text = indexes.CharField(document=True, use_template=True)    name = indexes.CharField(model_attr='name')    service = indexes.CharField(model_attr='service')    description = indexes.EdgeNgramField(model_attr='description')    content_auto = indexes.EdgeNgramField(model_attr='name')    def get_model(self):        """        Should return the ``Model`` class (not an instance) that the rest of the        ``SearchIndex`` should use        """        return EquipmentStores    def index_queryset(self, using=None):        """        Get the default QuerySet to index when doing a full update.        Subclasses can override this method to avoid indexing certain objects.        Used when the entire index for model is updated.        """        return self.get_model().objects.filter().all()class OrganisationsIndex(indexes.SearchIndex, indexes.Indexable):    text = indexes.CharField(document=True, use_template=True)    name = indexes.CharField(model_attr='name')    location = indexes.CharField(model_attr='location')    description = indexes.EdgeNgramField(model_attr='description')    content_auto = indexes.EdgeNgramField(model_attr='name')    def get_model(self):        """        Should return the ``Model`` class (not an instance) that the rest of the        ``SearchIndex`` should use        """        return Organisations    def index_queryset(self, using=None):        """        Get the default QuerySet to index when doing a full update.        Subclasses can override this method to avoid indexing certain objects.        Used when the entire index for model is updated.        """        return self.get_model().objects.filter().all()class ToursIndex(indexes.SearchIndex, indexes.Indexable):    name = indexes.CharField(model_attr='name')    price = indexes.CharField(model_attr='price')    text = indexes.CharField(use_template=True, document=True)    description = indexes.EdgeNgramField(model_attr='description')    content_auto = indexes.EdgeNgramField(model_attr='name')    def get_model(self):        """        Should return the ``Model`` class (not an instance) that the rest of the        ``SearchIndex`` should use        """        return Tours    def index_queryset(self, using=None):        """        Get the default QuerySet to index when doing a full update.        Subclasses can override this method to avoid indexing certain objects.        Used when the entire index for model is updated.        """        return self.get_model().objects.filter().all()