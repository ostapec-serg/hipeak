from haystack import indexesfrom equipment_stores.models import EquipmentStoresfrom news_blog.models import Newsclass NewsIndex(indexes.SearchIndex, indexes.Indexable):    text = indexes.EdgeNgramField(document=True, use_template=True)    categories = indexes.CharField(model_attr='categories')    publication_datetime = indexes.DateTimeField()    name = indexes.CharField(model_attr='name')    description = indexes.CharField(model_attr='description')    author = indexes.CharField(model_attr='author')    video = indexes.CharField(model_attr='video')    news_img = indexes.CharField(model_attr='news_img')    content_auto = indexes.EdgeNgramField(model_attr='author')    def get_model(self):        """        Should return the ``Model`` class (not an instance) that the rest of the        ``SearchIndex`` should use        """        return News    def index_queryset(self, using=None):        """        Get the default QuerySet to index when doing a full update.        Subclasses can override this method to avoid indexing certain objects.        Used when the entire index for model is updated.        """        return self.get_model().objects.all()class EquipmentStoresIndex(indexes.SearchIndex, indexes.Indexable):    text = indexes.EdgeNgramField(document=True, use_template=True)    name = indexes.CharField(model_attr='name')    services = indexes.CharField(model_attr='services')    description = indexes.CharField(model_attr='description')    content_auto = indexes.EdgeNgramField(model_attr='name')    def get_model(self):        """        Should return the ``Model`` class (not an instance) that the rest of the        ``SearchIndex`` should use        """        return EquipmentStores    def index_queryset(self, using=None):        """        Get the default QuerySet to index when doing a full update.        Subclasses can override this method to avoid indexing certain objects.        Used when the entire index for model is updated.        """        return self.get_model().objects.all()