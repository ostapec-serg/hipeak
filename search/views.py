from django.core.paginator import Paginatorfrom haystack.query import SearchQuerySet, EmptySearchQuerySetfrom haystack.generic_views import SearchViewfrom equipment_stores.models import EquipmentStoresfrom tours.models import Organisationsclass MySearchView(SearchView, SearchQuerySet):    """My custom search view."""    template_name = 'search/search.html'    paginator_class = Paginator    paginate_by = 1    def form_valid(self, form):        self.queryset = self.search()        context = self.get_context_data(            **{                self.form_name: form,                "query": form.cleaned_data.get(self.search_field),                "object_list": self.queryset,            }        )        return self.render_to_response(context)    def search(self):        """        Method to perform an auto_query search.        """        q = self.request.GET.get("q", '')        q_set = SearchQuerySet()        if q != '':            search_queryset = q_set.auto_query(query_string=q)            if search_queryset:                return search_queryset            search_queryset = self.search_autocomplete(q_set)            if search_queryset:                return search_queryset        return EmptySearchQuerySet()    def search_autocomplete(self, q_set):        """        Method to perform an autocomplete search.        Must be run against fields that are either        `NgramField` or `EdgeNgramField`.        """        q = self.request.GET.get("q", '')        search_queryset_desc = q_set.autocomplete(description=q)        search_queryset_content_auto = q_set.autocomplete(content_auto=q)        return search_queryset_desc | search_queryset_content_autoclass ContactsSearchView(SearchView):    template_name = 'contacts/contacts_page.html'    def form_valid(self, form):        self.queryset = self.search_contacts()        context = self.get_context_data(            **{                self.form_name: form,                "query": form.cleaned_data.get(self.search_field),                "object_list": self.queryset,            }        )        return self.render_to_response(context)    def search_contacts(self):        """        Method to perform an autocomplete search in contacts app.        Run against field `EdgeNgramField`.        """        q = self.request.GET.get("q", '')        search_queryset = SearchQuerySet().models(EquipmentStores, Organisations).autocomplete(content_auto=q)        search_result = []        for item in search_queryset:            search_result.append(item.object)        return search_result